(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)


let val emp0 = {id = 100, name = "Fred", deptno = 10} in #id emp0 end;
val it = 100 : int


val emp0 = {id = 100, name = "Fred", deptno = 10};
val emp0 = {deptno=10,id=100,name="Fred"} : {deptno:int, id:int, name:string}

val emp1 = {id = 101, name = "Velma", deptno = 20};
val emp1 = {deptno=20,id=101,name="Velma"} : {deptno:int, id:int, name:string}

val emp2 = {id = 102, name = "Shaggy", deptno = 30};
val emp2 = {deptno=30,id=102,name="Shaggy"} : {deptno:int, id:int, name:string}

val emp3 = {id = 103, name = "Scooby", deptno = 30};
val emp3 = {deptno=30,id=103,name="Scooby"} : {deptno:int, id:int, name:string}


val emps = [emp0, emp1, emp2, emp3];
val emps =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


val emps =
  let
    val emp0 = {id = 100, name = "Fred", deptno = 10}
    and emp1 = {id = 101, name = "Velma", deptno = 20}
    and emp2 = {id = 102, name = "Shaggy", deptno = 30}
    and emp3 = {id = 103, name = "Scooby", deptno = 30}
  in
    [emp0, emp1, emp2, emp3]
  end;
val emps =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


val depts =
  [{deptno = 10, name = "Sales"},
   {deptno = 20, name = "HR"},
   {deptno = 30, name = "Engineering"},
   {deptno = 40, name = "Support"}];
val depts =
  [{deptno=10,name="Sales"},{deptno=20,name="HR"},{deptno=30,name="Engineering"},
   {deptno=40,name="Support"}] : {deptno:int, name:string} list


from emps as e yield e;
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


from emps as e yield #id e;
val it = [100,101,102,103] : int list


from emps as e yield (#id e) - 100;
val it = [0,1,2,3] : int list


from emps as e yield #deptno e;
val it = [10,20,30,30] : int list


from emps as e yield {deptno = #deptno e, one = 1};
val it = [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}] : {deptno:int, one:int} list


from emps as e yield ((#id e) + (#deptno e));
val it = [110,121,132,133] : int list


from (from emps as e yield #deptno e) as e2 yield e2 + 1;
val it = [11,21,31,31] : int list


(* Disabled: '=' should have lower precedence than '#deptno e' fun application
from emps as e where #deptno e = 30 yield #name e;
*)

from emps as e where false yield (#deptno e);
val it = [] : int list


(* Disabled due to CCE
fun range i j =
  if i >= j then [] else i :: (range (i + 1) j);
*)

(* Disabled due to NPE in apply
range 0 5;

from range 0 5 as i where i mod 2 = 1 yield i;
*)
val integers = [0,1,2,3,4];
val integers = [0,1,2,3,4] : int list


from integers as i where i mod 2 = 1 yield i;
val it = [1,3] : int list


(*) missing yield
from integers as i where i mod 2 = 1;
val it = [1,3] : int list


from emps as e where (#deptno e) = 30 yield (#id e);
val it = [102,103] : int list


(*) cartesian product
from emps as e, emps as e2 yield (#name e) ^ "-" ^ (#name e2);
val it =
  ["Fred-Fred","Fred-Velma","Fred-Shaggy","Fred-Scooby","Velma-Fred",
   "Velma-Velma","Velma-Shaggy","Velma-Scooby","Shaggy-Fred","Shaggy-Velma",
   "Shaggy-Shaggy","Shaggy-Scooby","Scooby-Fred","Scooby-Velma","Scooby-Shaggy",
   "Scooby-Scooby"] : string list


(*) cartesian product, missing yield
from depts as d, integers as i;
val it =
  [{d={deptno=10,name="Sales"},i=0},{d={deptno=10,name="Sales"},i=1},
   {d={deptno=10,name="Sales"},i=2},{d={deptno=10,name="Sales"},i=3},
   {d={deptno=10,name="Sales"},i=4},{d={deptno=20,name="HR"},i=0},
   {d={deptno=20,name="HR"},i=1},{d={deptno=20,name="HR"},i=2},
   {d={deptno=20,name="HR"},i=3},{d={deptno=20,name="HR"},i=4},
   {d={deptno=30,name="Engineering"},i=0},{d={deptno=30,name="Engineering"},i=1},
   {d={deptno=30,name="Engineering"},i=2},{d={deptno=30,name="Engineering"},i=3},
   {d={deptno=30,name="Engineering"},i=4},{d={deptno=40,name="Support"},i=0},
   {d={deptno=40,name="Support"},i=1},{d={deptno=40,name="Support"},i=2},
   {d={deptno=40,name="Support"},i=3},{d={deptno=40,name="Support"},i=4}] : {d:{deptno:int, name:string}, i:int} list


(*) join
from emps as e, depts as d
  where (#deptno e) = (#deptno d)
  yield {id = (#id e), deptno = (#deptno e), ename = (#name e), dname = (#name d)};
val it =
  [{deptno=10,dname="Sales",ename="Fred",id=100},
   {deptno=20,dname="HR",ename="Velma",id=101},
   {deptno=30,dname="Engineering",ename="Shaggy",id=102},
   {deptno=30,dname="Engineering",ename="Scooby",id=103}] : {deptno:int, dname:string, ename:string, id:int} list
