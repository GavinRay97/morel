(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)


let val emp0 = {id = 100, name = "Fred", deptno = 10} in #id emp0 end;
val it = 100 : int


val emp0 = {id = 100, name = "Fred", deptno = 10};
val emp0 = {deptno=10,id=100,name="Fred"} : {deptno:int, id:int, name:string}

val emp1 = {id = 101, name = "Velma", deptno = 20};
val emp1 = {deptno=20,id=101,name="Velma"} : {deptno:int, id:int, name:string}

val emp2 = {id = 102, name = "Shaggy", deptno = 30};
val emp2 = {deptno=30,id=102,name="Shaggy"} : {deptno:int, id:int, name:string}

val emp3 = {id = 103, name = "Scooby", deptno = 30};
val emp3 = {deptno=30,id=103,name="Scooby"} : {deptno:int, id:int, name:string}


val emps = [emp0, emp1, emp2, emp3];
val emps =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


val emps =
  let
    val emp0 = {id = 100, name = "Fred", deptno = 10}
    and emp1 = {id = 101, name = "Velma", deptno = 20}
    and emp2 = {id = 102, name = "Shaggy", deptno = 30}
    and emp3 = {id = 103, name = "Scooby", deptno = 30}
  in
    [emp0, emp1, emp2, emp3]
  end;
val emps =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


val depts =
  [{deptno = 10, name = "Sales"},
   {deptno = 20, name = "HR"},
   {deptno = 30, name = "Engineering"},
   {deptno = 40, name = "Support"}];
val depts =
  [{deptno=10,name="Sales"},{deptno=20,name="HR"},{deptno=30,name="Engineering"},
   {deptno=40,name="Support"}] : {deptno:int, name:string} list


from e in emps yield e;
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


from e in emps yield #id e;
val it = [100,101,102,103] : int list


from e in emps yield (#id e) - 100;
val it = [0,1,2,3] : int list


from e in emps yield e.id - 100;
val it = [0,1,2,3] : int list


from e in emps yield #deptno e;
val it = [10,20,30,30] : int list


from e in emps yield e.deptno;
val it = [10,20,30,30] : int list


from e in emps yield {deptno = #deptno e, one = 1};
val it = [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}] : {deptno:int, one:int} list


from e in emps yield {deptno = e.deptno, one = 1};
val it = [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}] : {deptno:int, one:int} list


from e in emps yield {e.deptno, one = 1};
val it = [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}] : {deptno:int, one:int} list


from e in emps yield ((#id e) + (#deptno e));
val it = [110,121,132,133] : int list


from e in emps yield (e.id + e.deptno);
val it = [110,121,132,133] : int list


from e2 in (from e in emps yield #deptno e) yield e2 + 1;
val it = [11,21,31,31] : int list


from e2 in (from e in emps yield e.deptno) yield e2 + 1;
val it = [11,21,31,31] : int list


(* Disabled: '=' should have lower precedence than '#deptno e' fun application
from e in emps where #deptno e = 30 yield #name e;
*)

from e in emps where false yield e.deptno;
val it = [] : int list


(*) Function defined inside query
from e in emps
where e.deptno < 30
yield
  let
    fun p1 x = x + 1
  in
    p1 e.id
  end;
val it = [101,102] : int list


(* Disabled due to CCE
fun range i j =
  if i >= j then [] else i :: (range (i + 1) j);
*)

(* Disabled due to NPE in apply
range 0 5;

from i in range 0 5 where i mod 2 = 1 yield i;
*)
val integers = [0,1,2,3,4];
val integers = [0,1,2,3,4] : int list


from i in integers where i mod 2 = 1 yield i;
val it = [1,3] : int list


(*) missing yield
from i in integers where i mod 2 = 1;
val it = [1,3] : int list


from e in emps where e.deptno = 30 yield e.id;
val it = [102,103] : int list


(*) cartesian product
from e in emps, e2 in emps yield e.name ^ "-" ^ e2.name;
val it =
  ["Fred-Fred","Fred-Velma","Fred-Shaggy","Fred-Scooby","Velma-Fred",
   "Velma-Velma","Velma-Shaggy","Velma-Scooby","Shaggy-Fred","Shaggy-Velma",
   "Shaggy-Shaggy","Shaggy-Scooby","Scooby-Fred","Scooby-Velma","Scooby-Shaggy",
   "Scooby-Scooby"] : string list


(*) cartesian product, missing yield
from d in depts, i in integers;
val it =
  [{d={deptno=10,name="Sales"},i=0},{d={deptno=10,name="Sales"},i=1},
   {d={deptno=10,name="Sales"},i=2},{d={deptno=10,name="Sales"},i=3},
   {d={deptno=10,name="Sales"},i=4},{d={deptno=20,name="HR"},i=0},
   {d={deptno=20,name="HR"},i=1},{d={deptno=20,name="HR"},i=2},
   {d={deptno=20,name="HR"},i=3},{d={deptno=20,name="HR"},i=4},
   {d={deptno=30,name="Engineering"},i=0},{d={deptno=30,name="Engineering"},i=1},
   {d={deptno=30,name="Engineering"},i=2},{d={deptno=30,name="Engineering"},i=3},
   {d={deptno=30,name="Engineering"},i=4},{d={deptno=40,name="Support"},i=0},
   {d={deptno=40,name="Support"},i=1},{d={deptno=40,name="Support"},i=2},
   {d={deptno=40,name="Support"},i=3},{d={deptno=40,name="Support"},i=4}] : {d:{deptno:int, name:string}, i:int} list


(*) join
from e in emps, d in depts
  where e.deptno = d.deptno
  yield {id = e.id, deptno = e.deptno, ename = e.name, dname = d.name};
val it =
  [{deptno=10,dname="Sales",ename="Fred",id=100},
   {deptno=20,dname="HR",ename="Velma",id=101},
   {deptno=30,dname="Engineering",ename="Shaggy",id=102},
   {deptno=30,dname="Engineering",ename="Scooby",id=103}] : {deptno:int, dname:string, ename:string, id:int} list


(*) as above, using abbreviated record syntax
from e in emps, d in depts
  where e.deptno = d.deptno
  yield {e.id, e.deptno, ename = e.name, dname = d.name};
val it =
  [{deptno=10,dname="Sales",ename="Fred",id=100},
   {deptno=20,dname="HR",ename="Velma",id=101},
   {deptno=30,dname="Engineering",ename="Shaggy",id=102},
   {deptno=30,dname="Engineering",ename="Scooby",id=103}] : {deptno:int, dname:string, ename:string, id:int} list


(*) exists (defining the "exists" function ourselves)
(*) and correlated sub-query
(* disabled due to "::"
let
  fun exists [] = false
    | exists hd :: tl = true
in
  from e in emps
  where exists (from d in depts
                where d.deptno = e.deptno
                andalso d.name = "Engineering")
  yield e.name
end;
val it = ["Shaggy","Scooby"] : string list
*)

(*) in (defining the "in_" function ourselves)
(* disabled due to "::"
let
  fun in_ e [] = false
    | in_ e (h :: t) = e = h orelse (in_ e t)
in
  from e in emps
  where in_ e.deptno (from d in depts
                where d.name = "Engineering"
                yield d.deptno)
  yield e.name
end;
val it = ["Shaggy","Scooby"] : string list
*)

(*) foldl function (built into SML)
let
  fun foldl f start [] = start
    | foldl f start (hd :: tl) = foldl f (f (start, hd)) tl
in
  foldl (fn (x, y) => x + y) 0 [2,3,4]
end;
val it = 9 : int


(*) "group by" via higher-order functions
(*
let
  fun foldl f start [] = start
    | foldl f start (hd :: tl) = foldl f (f (start, hd)) tl;
  fun map f [] = []
    | map f (hd :: tl) = (f hd) :: (map f tl);
  fun computeAgg (extractor, folder) list =
      foldl folder (map extractor list);
  fun aggregate aggFns list =
      map (computeAgg list) aggFns;
  fun sum (x, y) = x + y;
in
  aggregate [(fn {id=id1,name=name1,deptno=deptno1} => id1, sum)] emps
end;
*)

(*) Basic 'group'
from e in emps
group e.deptno as deptno
  compute sum of e.id as sumId,
          count of e as count;
val it =
  [{count=1,deptno=20,sumId=1},{count=1,deptno=10,sumId=1},
   {count=2,deptno=30,sumId=2}] : {count:int, deptno:int, sumId:int} list


(*) As previous, without the implied "as deptno" in "group"
from e in emps
group e.deptno
  compute sum of e.id as sumId,
          count of e as count;
val it =
  [{count=1,deptno=20,sumId=1},{count=1,deptno=10,sumId=1},
   {count=2,deptno=30,sumId=2}] : {count:int, deptno:int, sumId:int} list


(*) 'group' with no aggregates
from e in emps
group e.deptno as deptno;
val it = [{deptno=20},{deptno=10},{deptno=30}] : {deptno:int} list


from e in emps
group e.deptno;
val it = [{deptno=20},{deptno=10},{deptno=30}] : {deptno:int} list


(*) composite 'group' with no aggregates
from e in emps
group e.deptno, e.id mod 2 as idMod2;
val it =
  [{deptno=30,idMod2=0},{deptno=30,idMod2=1},{deptno=10,idMod2=0},
   {deptno=20,idMod2=1}] : {deptno:int, idMod2:int} list


(*) 'group' with 'where' and complex argument to 'sum'
(*
from e in emps
where e.deptno < 30
group e.deptno as deptno
  compute sum of e.id as sumId,
          sum of e.id + e.deptno as sumIdPlusDeptno;
val it = [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"}] : {deptno:int, id:int, name:string} list
*)

(*) 'group' with join
from e in emps, d in depts
where e.deptno = d.deptno
group e.deptno,
 e.name as ename,
 d.name as dname
compute sum of e.id as sumId;
val it =
  [{deptno=30,dname="Engineering",ename="Scooby",sumId=1},
   {deptno=30,dname="Engineering",ename="Shaggy",sumId=1},
   {deptno=10,dname="Sales",ename="Fred",sumId=1},
   {deptno=20,dname="HR",ename="Velma",sumId=1}] : {deptno:int, dname:string, ename:string, sumId:int} list


(*) empty 'group'
from e in emps
group compute sum of e.id as sumId;
val it = [{sumId=4}] : {sumId:int} list


(*) user-defined aggregate function
let
  fun siz [] = 0
    | siz (ht :: tl) = 1 + (siz tl)
in
  from e in emps
  group e.deptno as deptno
  compute siz of e.id as size
end;
val it = [{deptno=20,size=1},{deptno=10,size=1},{deptno=30,size=2}] : {deptno:int, size:int} list


(*) Should we allow 'yield' following 'group'? Here's a possible syntax.
(*) We need to introduce a variable name, but "as g" syntax isn't great.
(*
from e in emps
group e.deptno
  compute sum of e.id as sumId,
          count of e as count
  as g
yield {g.deptno, avgId = g.sumId / g.count}
*)

(*) Or just use a sub-from:
from g in (
  from e in emps
  group e.deptno
    compute sum of e.id as sumId,
            count of e as count)
yield {g.deptno, avgId = g.sumId / g.count};
val it = [{avgId=1,deptno=20},{avgId=1,deptno=10},{avgId=1,deptno=30}] : {avgId:int, deptno:int} list


(*) Temporary functions
let
  fun abbrev s =
    if String_size s > 5
    then (String_substring (s, 0, 3)) ^ "."
    else s;
  fun shouldPromote e =
    e.id < e.deptno * 4
in
  from e in emps
  where shouldPromote e
  yield {e.id, e.deptno, abbrev_name = abbrev e.name}
end;
val it = [{abbrev_name="Sha.",deptno=30,id=102},{abbrev_name="Sco.",deptno=30,id=103}] : {abbrev_name:string, deptno:int, id:int} list


(*) There's no flatMap in the standard library, so define one
fun flatMap f l = List_concat (List_map f l);
val flatMap = fn : ('a -> 'b list) -> 'a list -> 'b list


flatMap String_explode ["ab", "", "def"];
val it = [#"a",#"b",#"d",#"e",#"f"] : char list


(*) A function that runs a query and returns the result
fun employeesIn deptno =
  from e in emps
  where e.deptno = deptno;
val employeesIn = fn : int -> {deptno:int, id:int, name:string} list


employeesIn 10;
val it = [{deptno=10,id=100,name="Fred"}] : {deptno:int, id:int, name:string} list

employeesIn 25;
val it = [] : {deptno:int, id:int, name:string} list

employeesIn 30;
val it = [{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


(*) Using 'map' to stick together results
List_map employeesIn [10, 25, 30];
val it =
  [[{deptno=10,id=100,name="Fred"}],[],
   [{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]] : {deptno:int, id:int, name:string} list list


(*) Same, using 'from'
from deptno in [10, 25, 30]
  yield employeesIn deptno;
val it =
  [[{deptno=10,id=100,name="Fred"}],[],
   [{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]] : {deptno:int, id:int, name:string} list list


(*) Flatten (using flatMap)
flatMap employeesIn [10, 25, 30];
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=30,id=102,name="Shaggy"},
   {deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


(*) Flatten (using a lateral join); compare to SQL 'CROSS APPLY'
from deptno in [10, 25, 30],
    e in employeesIn deptno
  yield e;
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=30,id=102,name="Shaggy"},
   {deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


(*) A deep nested loop
from e in
  (from e in
    (from e in
      (from e in
        (from e in
          (from e in
            (from e in
              (from e in
                (from e in
                  (from e in
                    (from e in emps
                     yield e)
                   yield e)
                 yield e)
               yield e)
             yield e)
           yield e)
         yield e)
       yield e)
     yield e)
   yield e);
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


(*) dummy
from message in ["the end"];
val it = ["the end"] : string list
