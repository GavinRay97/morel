/*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */

options {
  STATIC = false;
  IGNORE_CASE = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(SmlParserImpl)

package net.hydromatic.sml.parse;

import net.hydromatic.sml.ast.Ast;
import net.hydromatic.sml.ast.Ast.*;
import net.hydromatic.sml.ast.AstBuilder;
import net.hydromatic.sml.ast.AstNode;
import net.hydromatic.sml.ast.Pos;

import com.google.common.collect.ImmutableList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Parser for Standard ML, generated from SmlParser.jj by JavaCC.
 */
public class SmlParserImpl implements SmlParser
{
  private static final Logger LOGGER =
      LoggerFactory.getLogger("net.hydromatic.sml.parse");

  public void setTabSize(int tabSize) {
    jj_input_stream.setTabSize(tabSize);
  }

  private final AstBuilder ast = AstBuilder.INSTANCE;

  public Pos getPos() {
    return new Pos(token.beginLine, token.beginColumn,
        token.endLine, token.endColumn);
  }
}

PARSER_END(SmlParserImpl)

/* For Debug */
JAVACODE
void debug_message1()
{
  LOGGER.info("{} , {}", getToken(0).image, getToken(1).image);
}

JAVACODE Pos pos() {
  return new Pos(token.beginLine, token.beginColumn,
    token.endLine, token.endColumn);
}

/** Parses a literal expression. */
Literal literal() :
{
  final Ast.Literal e;
}
{
  e = numericLiteral() { return e; }
|
  e = stringLiteral() { return e; }
}

/** Parses a numeric literal */
Literal numericLiteral() :
{
  final BigDecimal d;
}
{
  (<NATURAL_LITERAL> | <INTEGER_LITERAL>) {
    if (token.image.startsWith("~")) {
      d = new BigDecimal(token.image.substring(1)).negate();
    } else {
      d = new BigDecimal(token.image);
    }
    return ast.intLiteral(d, pos());
  }
|
  <REAL_LITERAL> {
    if (token.image.startsWith("~")) {
      d = new BigDecimal(token.image.substring(1)).negate();
    } else {
      d = new BigDecimal(token.image);
    }
    return ast.realLiteral(d, pos());
  }
|
  <SCIENTIFIC_LITERAL> {
    final int e = Math.max(token.image.indexOf("e"),
      token.image.indexOf("E"));
    if (token.image.startsWith("~")) {
      d = new BigDecimal(token.image.substring(1, e)).negate();
    } else {
      d = new BigDecimal(token.image.substring(0, e));
    }
    final int exponent;
    if (token.image.startsWith("~", e + 1)) {
      exponent = -Integer.valueOf(token.image.substring(e + 2));
    } else {
      exponent = Integer.valueOf(token.image.substring(e + 1));
    }
    return ast.realLiteral(d.scaleByPowerOfTen(exponent), pos());
  }
}

/** Parses a string literal. */
Literal stringLiteral() :
{
}
{
  <QUOTED_STRING> {
    assert token.image.charAt(0) == '"';
    assert token.image.charAt(token.image.length() - 1) == '"';
    String image = token.image.substring(1, token.image.length() - 1);
    return ast.stringLiteral(pos(), image.replace("''", "'"));
  }
}

/** Parses an identifier. */
Id identifier() :
{
}
{
  <IDENTIFIER> {
    return ast.id(pos(), token.image);
  }
}

/** Parses a record selector, e.g. "{@code #empno}".
 *
 * <p>You use it as a function to extract a field of a record;
 * for example <code>#empno {empno=10, name="Fred"}</code>
 * yields {@code 10}. */
RecordSelector recordSelector() :
{
}
{
  <LABEL> {
    assert token.image.startsWith("#");
    return ast.recordSelector(pos(), token.image.substring(1));
  }
}

/** Parses a "if ... then ... else ..." expression. */
Exp ifThenElse() :
{
  final Span span;
  final Exp condition;
  final Exp ifTrue;
  final Exp ifFalse;
}
{
  <IF> { span = Span.of(getPos()); } condition = expression()
  <THEN> ifTrue = expression()
  <ELSE> ifFalse = expression() {
    return ast.ifThenElse(span.end(this), condition, ifTrue, ifFalse);
  }
}

/** Parses a "let ... in expression end" expression. */
Exp let() :
{
  final Span span;
  final Exp e;
  final VarDecl decl;
}
{
  <LET> { span = Span.of(getPos()); }
  decl = varDecl() <IN> e = expression() <END> {
    return ast.let(span.end(this), decl, e);
  }
}

/** Parses a "{@code case exp of pat => exp | pat => exp}" expression. */
Exp caseOf() :
{
  final Span span;
  final Exp exp;
  final List<Match> matchList;
}
{
  <CASE> { span = Span.of(getPos()); } exp = expression() <OF>
  matchList = matchList() {
    return ast.caseOf(span.end(this), exp, matchList);
  }
}

/** Parses a "{@code fn arg => expression}" lambda expression. */
Exp fn() :
{
  final Span span;
  final Match match;
}
{
  <FN> { span = Span.of(getPos()); } match = match() {
    return ast.fn(span.end(this), match);
  }
}

List/*<Match>*/ matchList() :
{
  Match match;
  final List<Match> matchList = new ArrayList<Match>();
}
{
  match = match() { matchList.add(match); }
  (
    <BAR> match = match() { matchList.add(match); }
  )*
  { return matchList; }
}

/** Parses a "{@code pat => expression}" match. */
Match match() :
{
  final Pat pat;
  final Exp e;
}
{
  pat = pat() <RARROW> e = expression() {
    return ast.match(pat.pos.plus(e.pos), pat, e);
  }
}

/** Parses an expression.
 *
 * <p>7 is the highest level of precedence. The full list is as follows:
 * <ul>
 * <li>infix 7 {@code * / div mod}
 * <li>infix 6 {@code + - ^}
 * <li>infixr 5 {@code :: @}
 * <li>infix 4 {@code = <> > >= < <=}
 * <li>infix 3 {@code := o}
 * <li>infix 0 {@code before}
 * </ul>
 */
Exp expression7() :
{
  Exp e;
  Exp e2;
}
{
  e = atom()
  (
    <STAR> e2 = atom() {
      e = ast.times(e, e2);
    }
  |
    <SLASH> e2 = atom() {
      e = ast.divide(e, e2);
    }
  |
    <DIV> e2 = atom() {
      e = ast.div(e, e2);
    }
  |
    <MOD> e2 = atom() {
      e = ast.mod(e, e2);
    }
  )*
  { return e; }
}

/** Parses an expression of precedence level 6 (+, -, ^). */
Exp expression6() :
{
  Exp e;
  Exp e2;
}
{
  e = expression7()
  (
    <PLUS> e2 = expression7() {
      e = ast.plus(e, e2);
    }
  |
    <MINUS> e2 = expression7() {
      e = ast.minus(e, e2);
    }
  |
    <CARET> e2 = expression7() {
      e = ast.caret(e, e2);
    }
  )*
  { return e; }
}

/** Parses an expression of precedence level 5 ({@code ::}),
* right-associative. */
Exp expression5() :
{
  Exp e;
  final List<Exp> list = new ArrayList<Ast.Exp>();
}
{
  e = expression6() { list.add(e); }
  (
    <CONS> e = expression6() { list.add(e); }
  )*
  {
    e = list.get(list.size() - 1);
    for (int i = list.size() - 2; i >= 0; i--) {
      e = ast.cons(list.get(i), e);
    }
    return e;
  }
}

/** Parses an expression of precedence level 4 ({@code =}, {@code <>},
  * {@code >}, {@code >=}, {@code <}, {@code <=}). */
Exp expression4() :
{
  Exp e;
  Exp e2;
}
{
  e = expression5()
  (
    <EQ> e2 = expression5() {
      e = ast.equal(e, e2);
    }
  |
    <NE> e2 = expression5() {
      e = ast.notEqual(e, e2);
    }
  |
    <LT> e2 = expression5() {
      e = ast.lessThan(e, e2);
    }
  |
    <GT> e2 = expression5() {
      e = ast.greaterThan(e, e2);
    }
  |
    <LE> e2 = expression5() {
      e = ast.lessThanOrEqual(e, e2);
    }
  |
    <GE> e2 = expression5() {
      e = ast.greaterThanOrEqual(e, e2);
    }
  )*
  { return e; }
}

/** Parses an expression of precedence level 2 (andalso). */
Exp expression2() :
{
  Exp e;
  Exp e2;
}
{
  e = expression4()
  (
    <ANDALSO> e2 = expression4() {
      e = ast.andAlso(e, e2);
    }
  )*
  { return e; }
}

/** Parses an expression of precedence level 1 (orelse). */
Exp expression1() :
{
  Exp e;
  Exp e2;
}
{
  e = expression2()
  (
    <ORELSE> e2 = expression2() {
      e = ast.orElse(e, e2);
    }
  )*
  { return e; }
}

Exp expression() :
{
  Exp e;
  Exp e2;
}
{
  e = expression1()
  (
    e2 = expression1() {
      e = ast.apply(e, e2);
    }
  )*
  { return e; }
}

/** Parses an atomic expression. */
Exp atom() :
{
  final Exp e;
  final Span span;
}
{
  e = identifier() { return e; }
|
  e = recordSelector() { return e; }
|
  e = literal() { return e; }
|
  e = let() { return e; }
|
  e = fn() { return e; }
|
  e = ifThenElse() { return e; }
|
  e = caseOf() { return e; }
|
  <LPAREN> {
    span = Span.of(getPos());
  }
  (
    <RPAREN> { return ast.unitLiteral(span.end(this)); }
  |
    e = expression()
    (
      <RPAREN> { return e; }
    |
      {
        final List<Exp> list = new ArrayList<Exp>();
        list.add(e);
        Exp e2;
      }
      (
        <COMMA> e2 = expression() { list.add(e2); }
      )+
      <RPAREN> {
        return ast.tuple(span.end(this), list);
      }
    )
  )
|
  <LBRACKET> {
    span = Span.of(getPos());
    final List<Exp> list = new ArrayList<Exp>();
    Exp e2;
  }
  [
    e2 = expression() { list.add(e2); }
    (
      <COMMA> e2 = expression() { list.add(e2); }
    )*
  ]
  <RBRACKET> {
    return ast.list(span.end(this), list);
  }
|
  <LBRACE> {
    span = Span.of(getPos());
    final Map<String, Exp> map = new LinkedHashMap<String, Exp>();
  }
  [
    recordExp(map)
    (
      <COMMA> recordExp(map)
    )*
  ]
  <RBRACE> {
    return ast.record(span.end(this), map);
  }
}

/** Parses a "label = expression" inside a record. */
void recordExp(Map/*<String, Exp>*/ map) :
{
  final String id;
  final Ast.Exp exp;
}
{
  ( <NATURAL_LITERAL> | <IDENTIFIER> ) { id = token.image; }
  <EQ> exp = expression() { map.put(id, exp); }
}

/** Parses a variable declaration, and adds it to a list. */
void addVarDecl(List decls) :
{
  final VarDecl decl;
}
{
  decl = varDecl() {
    decls.add(decl);
  }
}

/** Parses a variable declaration. */
VarDecl varDecl() :
{
  final Span span;
  final List<Ast.ValBind> valBinds = new ArrayList<ValBind>();
}
{
  <VAL> { span = Span.of(getPos()); } valBind(valBinds)
  (
    <AND> valBind(valBinds)
  )*
  { return ast.varDecl(span.end(this), valBinds); }
}

void valBind(List/*<Ast.ValBind>*/ valBinds) :
{
  final Pat pat;
  final Exp e;
  boolean rec = false;
}
{
  [ <REC> { rec = true; } ]
  pat = pat() <EQ> e = expression() {
    valBinds.add(ast.valBind(pat.pos.plus(e.pos), rec, pat, e));
  }
}

/** Parses a declaration. */
AstNode decl() :
{
  final AstNode n;
}
{
  n = varDecl() { return n; }
}

/** Parses a pattern. */
Pat pat() :
{
  Pat pat;
  Ast.TypeNode type;
}
{
  pat = pattern5()
  (
    <COLON> type = type() {
      pat = ast.annotatedPat(pat.pos.plus(type.pos), pat, type);
    }
  )*
  { return pat; }
}

/** Parses an pattern of precedence level 5 ({@code ::}),
* right-associative. */
Pat pattern5() :
{
  Pat pat;
  final List<Pat> list = new ArrayList<Ast.Pat>();
}
{
  pat = atomPat() { list.add(pat); }
  (
    <CONS> pat = atomPat() { list.add(pat); }
  )*
  {
    pat = list.get(list.size() - 1);
    for (int i = list.size() - 2; i >= 0; i--) {
      pat = ast.consPat(list.get(i), pat);
    }
    return pat;
  }
}

/** Parses an atomic pattern. */
Pat atomPat() :
{
  final Span span;
  final Ast.Id id;
  final Ast.Literal literal;
  final Ast.Pat p;
  Pat p2;
}
{
  id = identifier() { return ast.idPat(id.pos, id.name); }
|
  literal = literal() {
    return ast.literalPat(literal.pos, literal.op.toPat(), literal.value);
  }
|
  "_" {
    return ast.wildcardPat(pos());
  }
|
  <LPAREN> p = pat()
  (
    <RPAREN> { return p; }
  |
    {
      span = Span.of(getPos());
      final List<Pat> list = new ArrayList<Pat>();
      list.add(p);
    }
    (
      <COMMA> p2 = pat() { list.add(p2); }
    )+
    <RPAREN> {
      return ast.tuplePat(span.end(this), list);
    }
  )
|
  <LBRACKET> {
    span = Span.of(getPos());
    final List<Pat> list = new ArrayList<Pat>();
  }
  [
    p2 = pat() { list.add(p2); }
    (
      <COMMA> p2 = pat() { list.add(p2); }
    )*
  ]
  <RBRACKET> {
    return ast.listPat(span.end(this), list);
  }
|
  <LBRACE> {
    span = Span.of(getPos());
    final Map<String, Pat> map = new LinkedHashMap<String, Pat>();
    final boolean[] ellipsis = {false};
  }
  recordPat(ellipsis, map)
  (
    <COMMA> recordPat(ellipsis, map)
  )*
  <RBRACE> {
    return ast.recordPat(span.end(this), ellipsis[0], map);
  }
}

/** Parses a "label = pat" inside a record pattern. */
void recordPat(boolean[] ellipsis, Map/*<String, Pat>*/ map) :
{
  final String id;
  final Ast.Pat pat;
}
{
  <ELLIPSIS> { ellipsis[0] = true; }
|
  ( <NATURAL_LITERAL> | <IDENTIFIER> ) { id = token.image; }
  <EQ> pat = pat() { map.put(id, pat); }
}

/** Parses a type. */
TypeNode type() :
{
  final Ast.TypeNode type;
}
{
  type = namedType() { return type; }
}

TypeNode namedType() :
{
}
{
  <IDENTIFIER> {
    return ast.namedType(pos(), token.image);
  }
}

AstNode statement() :
{
  final AstNode n;
}
{
  n = expression() { return n; }
|
  n = decl() { return n; }
}

AstNode statementSemicolon() :
{
  final AstNode n;
}
{
  n = statement() <SEMICOLON> { return n; }
}

<DEFAULT> TOKEN :
{
  < AND: "AND" >
| < ANDALSO: "ANDALSO" >
| < CASE: "CASE" >
| < DIV: "DIV" >
| < ELSE: "ELSE" >
| < END: "END" >
| < FN: "FN" >
| < IF: "IF" >
| < IN: "IN" >
| < LET: "LET" >
| < MOD: "MOD" >
| < OF: "OF" >
| < ORELSE: "ORELSE" >
| < REC: "REC" >
| < THEN: "THEN" >
| < VAL: "VAL" >
}

/* LITERALS */

<DEFAULT> TOKEN :
{
    < NATURAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
    |
    < INTEGER_LITERAL: ("~")?(["0"-"9"])+ >
    |
    < REAL_LITERAL: ("~")?(["0"-"9"])+ "." (["0"-"9"])+ >
    |
    < SCIENTIFIC_LITERAL: ("~")?(["0"-"9"])+
                          ("." (["0"-"9"])+)?
                          "e" ("~")?(["0"-"9"])+>
    |
    < #HEXDIGIT: ["0"-"9","a"-"f","A"-"F"] >
    |
    < #WHITESPACE:
    [ " ","\t","\n","\r","\f" ]
    >
    |
    < QUOTED_STRING: <DOUBLE_QUOTE> ( (~["\""]) | ("\"\""))* <DOUBLE_QUOTE> >
}

/* SEPARATORS */

<DEFAULT> TOKEN :
{
    < LPAREN: "(">
    | < RPAREN: ")">
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < SEMICOLON: ";" >
    | < BAR: "|" >
    | < DOT: "." >
    | < COMMA: "," >
    | < RARROW: "=>" >
}

/* OPERATORS */

<DEFAULT> TOKEN :
{
    < EQ: "=" >
    | < GT: ">" >
    | < LT: "<" >
    | < COLON: ":" >
    | < LE: "<=" >
    | < GE: ">=" >
    | < NE: "<>" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < CARET: "^" >
    | < STAR: "*" >
    | < SLASH: "/" >
    | < CONS: "::" >
    | < ELLIPSIS: "..." >
    | < QUOTE: "'" >
    | < DOUBLE_QUOTE: "\"" >
}


/*****************************************
 * Lexical Descriptions                  *
 *****************************************/

TOKEN_MGR_DECLS : {
    List<Integer> lexicalStateStack = new ArrayList<Integer>();

    void pushState() {
      lexicalStateStack.add(curLexState);
    }

    void popState() {
      SwitchTo(lexicalStateStack.remove(lexicalStateStack.size() - 1));
    }
}

/*
Lexical states:

DEFAULT:
IN_SINGLE_LINE_COMMENT:
IN_FORMAL_COMMENT:
IN_MULTI_LINE_COMMENT:

DEFAULT is the normal state.

After a comment has completed, the lexer returns to the previous state, one
of the 'normal states'.
*/

/* WHITE SPACE */

<DEFAULT> SKIP :
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

/* COMMENTS */

<DEFAULT> MORE :
{
    <"/**" ~["/"]> { pushState(); } : IN_FORMAL_COMMENT
}

<DEFAULT> MORE :
{
    "//" { pushState(); } : IN_SINGLE_LINE_COMMENT
    |
    "--" { pushState(); } : IN_SINGLE_LINE_COMMENT
    |
    "/*" { pushState(); } : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > { popState(); }
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
    <FORMAL_COMMENT: "*/" > { popState(); }
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <MULTI_LINE_COMMENT: "*/" > { popState(); }
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
    < ~[] >
}


/* IDENTIFIERS */

<DEFAULT> TOKEN :
{
    < COLLATION_ID:
    (<LETTER>|<DIGIT>)+ (<LETTER>|<DIGIT>|":"|"."|"-"|"_")*
    "$"
    (<LETTER>|"_")+
    ("$" (<LETTER>|<DIGIT>|"_")+)?
    >
    |
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    |
    < LABEL: "#" (<LETTER>|<DIGIT>)+ >
    |
    < #LETTER:
    [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
    ]
    >
    |
    < #DIGIT:
    [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
    ]
    >
}

// End SmlParser.jj
